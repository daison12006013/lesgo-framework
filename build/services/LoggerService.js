"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var Sentry=_interopRequireWildcard(require("@sentry/minimal")),_LesgoException=_interopRequireDefault(require("../exceptions/LesgoException"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var a=new WeakMap;return _getRequireWildcardCache=function(){return a},a}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b=_getRequireWildcardCache();if(b&&b.has(a))return b.get(a);var c={};if(null!=a){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}}return c.default=a,b&&b.set(a,c),c}const getCurrentDateTime=()=>new Date().toUTCString();class LoggerService{constructor(a={}){const b={logger:"lesgo-logger",meta:{},transports:[]},c={...b,logger:a.logger||b.logger,meta:{...b.meta,...(a.defaultMeta||{})},transports:a.transports||[]};this.logger=c.logger,this.meta=c.meta,this.transports=c.transports,this.getCreatedAt=c.getCreatedAt,this.logLevels={error:0,warn:1,info:2,debug:3}}log(a,b,c={}){if(a===void 0||!Object.keys(this.logLevels).includes(a))throw new _LesgoException.default("Invalid level provided in log()");const d=this.structureLogMessage(a,b,c);this.transports.map(b=>this[`${b.logType}Logger`](a,d))}error(a,b={}){this.log("error",a,b)}warn(a,b={}){this.log("warn",a,b)}info(a,b={}){this.log("info",a,b)}debug(a,b={}){this.log("debug",a,b)}addMeta(a={}){this.meta={...this.meta,...a}}consoleLogger(a,b){if(!this.checkIsLogRequired("console",a))return null;const c=this.refineMessagePerTransport("console",b);return console[a](JSON.stringify(c))}sentryLogger(a,b){if(!this.checkIsLogRequired("sentry",a))return null;const c=this.refineMessagePerTransport("sentry",b);return Sentry.withScope(a=>(a.setExtras(c.extra),a.setTags(c.tags),"error"===c.level?Sentry.captureException(c.message instanceof Error?c.message:new Error(c.message)):Sentry.captureMessage(c.message,c.level))),Sentry.configureScope(a=>{a.clear()})}checkIsLogRequired(a,b){const c=this.getTransportByName(a).level;return!(this.logLevels[c]<this.logLevels[b])}structureLogMessage(a,b,c){const d={level:a,message:b,logger:this.logger,extra:{...this.meta,...c}};return d}refineMessagePerTransport(a,b){const c=this.getTransportByName(a),d={...b};return void 0!==c.config&&(void 0!==c.config.meta&&(d.extra={...d.extra,...c.config.meta}),void 0!==c.config.tags&&(d.tags=c.config.tags),void 0!==d.tags&&void 0!==d.extra.tags&&(d.tags={...d.tags,...d.extra.tags},delete d.extra.tags),c.config.getCreatedAt&&(d.created=getCurrentDateTime())),d}getTransportByName(a){return this.transports.find(b=>b.logType===a)}}exports.default=LoggerService;